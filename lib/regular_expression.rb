# 正規表現1
# \d は「半角数字1文字」を表す
# {n,m} は「直前の文字が n 文字以上、m 文字以下」であることを表す
# {n} は「直前の文字がちょうど n 文字」であることを表す
# [AB] は「AまたはBが1文字」であることを表す
# [a-z] と [-az] ではハイフンの意味が異なる
# 正規表現の正確さと複雑さはトレードオフになることが多い

# text = <<-TEXT
# 名前：伊藤淳一
# 電話：03-1234-5678
# 住所：兵庫県西脇市板波町1-2-3
# TEXT
# p text.scan /\d\d-\d\d\d\d-\d\d\d\d/
# => ["03-1234-5678"]


# text = <<-TEXT
# 名前：伊藤淳一
# 電話：03-1234-5678
# 電話：090-1234-5678
# 電話：0795-12-3456
# 電話：04992-1-2345
# 住所：兵庫県西脇市板波町1-2-3
# TEXT
# 「量指定子」{ n,m }=> 直前の文字がn個以上,m個未満を示す
# p text.scan /\d{2,5}-\d{1,4}-\d{4}/
# => ["03-1234-5678", "090-1234-5678", "0795-12-3456", "04992-1-2345"]


# 「AまたはBのいずれか1文字」表す場合は [AB]
# [ABC] => ABCのいずれか1文字
# [-(] => - or (のいずれか1文字
# text = <<-TEXT
# 名前：伊藤淳一
# 電話：03(1234)5678
# 電話：090-1234-5678
# 電話：0795(12)3456
# 電話：04992-1-2345
# 住所：兵庫県西脇市板波町1-2-3
# TEXT
# p text.scan /\d{2,5}[-(]\d{1,4}[-)]\d{4}/
# => ["03(1234)5678", "090-1234-5678", "0795(12)3456", "04992-1-2345"]
# 注意 [a-z]で使われる-は(aからz)という意味を持たせる。
# -を取り出したいときは[-az],[az-]のように先頭か後ろに置く必要がある

# 電話番号を表現する上でもう少し正確性を高めるなら、、、
# 1文字目は0、2文字目は0以外の数字と言えるから、
# 0[1-9]\d{0,3}[-(]\d{1,4}[-)]\d{4}





# ===============================================================
# 正規表現2

# 「～が1文字、または無し」を表現するためには ?を用いる
# [ 　・]? => 半角、全角、・から1文字、もしくは無し
# text = <<-TEXT
# クープバゲットのパンは美味しかった。
# 今日はクープ バゲットさんに行きました。
# クープ　バゲットのパンは最高。
# ジャムおじさんのパン、ジャムが入ってた。
# また行きたいです。クープ・バゲット。
# クープ・バケットのパン、売り切れだった（><）
# TEXT
# p text.scan /クープ[ 　・]?バ[ゲケ]ット/
# => ["クープバゲット", "クープ バゲット", "クープ　バゲット", "クープ・バゲット", "クープ・バケット"]


# 「任意の1文字」を表す . というメタ文字
# .? => 任意の1文字、もしくは無し
# p text.scan /クープ.?バ[ゲケ]ット/
# [ 　・]以外の文字の場合でも抽出するが、
# 今回の場合、出力結果は上記と同じになる


# grep => 対象の文字を含む行を抽出する
# text = <<-TEXT
# クープバゲットのパンは美味しかった。
# 今日はクープ バゲットさんに行きました。
# クープ　バゲットのパンは最高。
# ジャムおじさんのパン、ジャムが入ってた。
# また行きたいです。クープ・バゲット。
# クープ・バケットのパン、売り切れだった（><）
# TEXT
# p text.split(/\n/).grep(/クープ.?バ[ゲケ]ット/)
# => ["クープバゲットのパンは美味しかった。", "今日はクープ バゲットさんに行きました。", "クープ　バゲットのパンは最高。", "また行きたいです。クープ・バゲット。", "クープ・バケットのパン、売り切れだった（><）"]
























# 検索を使って、拡張子がjpg,gif,bmpのファイルを取得する。
# text = <<-TEXT
# puzzle/regex/aaa.bmp
# puzzle/regex/aaa.txt
# puzzle/regex/aaa.gif
# puzzle/regex/aaa.zip
# TEXT
# p text.split(/\n/).grep(/.+(jpg|gif|bmp)/)


# 行頭から4文字目と5文字目の間に、ハイフンを挿入する。ただし、5文字目がない場合はハイフンを挿入しない。
# text = <<-TEXT
# 123
# 1234
# 12345
# 123456
# TEXT
# a = text.split(/\n/).grep(/[0-9]{5,}/)
# a.each do |b|
#   b.insert(4,"-")
# end
# p a


# 置換を使って、小数第4位以下の数字を削除する。また、小数第3位は0なら削除する。
# 芝田さん解答 => ?:0で「0をキャプチャしない」
# irb(main):053:0> "123.4567".gsub(/(?<=\.[0-9]{2})(?:0|([^0]))[0-9]*$/, '\1')
# => "123.456"
# irb(main):054:0> "123.40000".gsub(/(?<=\.[0-9]{2})(?:0|([^0]))[0-9]*$/, '\1')
# => "123.40"
